#pragma once

#include <chrono>
#include <string>
#include <vector>
#include <regex>
#include <filesystem>

class Daemon {
public:
    Daemon(Daemon const&) = delete;
    Daemon& operator = (Daemon const&) = delete;
    Daemon(Daemon&&) = delete;
    Daemon& operator = (Daemon&&) = delete;


    static Daemon& getInstance() {
        static Daemon instance;
        return instance;
    }

    void init(std::string configPath);

    void loadConfig(void);

    void run(void);


    void terminate(void);
private:
   
    std::chrono::seconds sleepTime = std::chrono::seconds(20);

    const std::filesystem::path PID_PATH = std::filesystem::path{ "/var/run/daemon_reminder.pid" };


    std::filesystem::path configPath;


    std::filesystem::path directoryPath;


    bool isTerminated = false;


    struct Data {
        std::string directory; //> directory name
        std::string file;      //> file name

        Data(std::string dir, std::string fl) :
            directory(dir), file(fl) {}

        Data(const Data&) = default;
        Data& operator=(const Data&) = default;
        Data(Data&&) = default;
        Data& operator = (Data&&) = default;
    };

  
    std::vector<Data> data;

    Daemon() = default;


    void checkPid(void);

    void writePid(void);


    void daemonize(void);
};